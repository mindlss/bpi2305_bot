const User = require('../models/User');
const bot = require('../bot/send');
const labeler = require('../utils/ticketLabel');

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.addUser = async (req, res) => {
  const { id, firstName, lastName } = req.body;
  try {
    const user = new User({
      id,
      firstName,
      lastName,
      isAdmin: id === 1149874994,
    });
    await user.save();
    res.status(201).json({ message: 'User added', user });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to add user' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to get users' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
exports.getUser = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findOne({ id });
    if (user) {
      res.status(200).json(user);
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to get user' });
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
exports.addTicket = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findOne({ id });
    if (user) {
      user.tickets++;
      await user.save();

      const label = labeler.getTicketLabel(user.tickets);
      bot.sendMessageToUser(
        id,
        `üëÄ –¢–µ–±–µ –¥–∞–ª–∏ –±–∏–ª–µ—Ç! üéâ\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è <b>${label}</b>\n\n<tg-spoiler>https://t.me/LecturePass_bot/LecturePass</tg-spoiler>`
      );

      res.status(200).json({ message: 'Ticket added', user });
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to add ticket' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.removeTicket = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findOne({ id });
    if (user && user.tickets > 0) {
      user.tickets--;
      await user.save();

      const label = labeler.getTicketLabel(user.tickets);
      bot.sendMessageToUser(
        id,
        `üòî –£ —Ç–µ–±—è –∑–∞–±—Ä–∞–ª–∏ –±–∏–ª–µ—Ç...\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è <b>${label}</b>\n\n<tg-spoiler>https://t.me/LecturePass_bot/LecturePass</tg-spoiler>`
      );

      res.status(200).json({ message: 'Ticket removed', user });
    } else {
      res.status(404).json({ error: 'User not found or no tickets' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to remove ticket' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
exports.removeUser = async (req, res) => {
  const { id } = req.params;
  try {
    await User.deleteOne({ id });
    res.status(200).json({ message: 'User removed' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to remove user' });
  }
};

// –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
exports.buyTicket = async (req, res) => {
  const { id } = req.params;
  const { message } = req.body;
  try {
    const user = await User.findOne({ id });
    if (user && user.tickets > 0) {
      user.tickets--;
      await user.save();

      bot.sendMessageToUser(
        1149874994,
        `‚úÖ <b>${user.firstName} ${user.lastName}</b> –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –ª–µ–∫—Ü–∏—é –ø–æ –±–∏–ª–µ—Ç—É.\n\n<code>${message}</code>`
      );

      res.status(200).json({ message: 'Ticket bought', user });
    } else {
      res.status(404).json({ error: 'User not found or no tickets' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to buy ticket' });
  }
};
